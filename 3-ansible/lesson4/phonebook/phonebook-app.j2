# Phonebook Web Uygulaması (Flask + MySQL)
# Bu uygulama, Flask framework'ü kullanılarak geliştirilmiş basit bir telefon rehberi web uygulamasıdır.
# Kullanıcılar kişi arayabilir, yeni kişi ekleyebilir, mevcut kişiyi güncelleyebilir veya silebilir.
# uygulama dosyasındaki private_ip değişkeni bu template dosyasında dinamik olarak alınmıştır.
# developer_name değişkeni de daha esnek şekilde kullanılabilir hale getirilerek web_server değişkeni olarak tek yerden değiştirlebilir hale getirilmiştir.
# db bilgileri değiştirildiyse burada da güncellenmelidir. onun dışında değişiklik yapmaya gerek yoktur.

from flask import Flask, request, render_template
from flaskext.mysql import MySQL

app = Flask(__name__)
developer_name = "{{ developer_name }}"
app.config['MYSQL_DATABASE_HOST'] = "{{ hostvars['db_server']['ansible_facts']['default_ipv4']['address'] }}"
app.config['MYSQL_DATABASE_USER'] = 'remoteUser'
app.config['MYSQL_DATABASE_PASSWORD'] = 'cloud123'
app.config['MYSQL_DATABASE_DB'] = 'phonebook_db'
app.config['MYSQL_DATABASE_PORT'] = 3306

mysql = MySQL()
mysql.init_app(app)
connection = mysql.connect()
connection.autocommit(True)
cursor = connection.cursor()

def init_phonebook_db():
    phonebook_table = """
    CREATE TABLE IF NOT EXISTS phonebook_db.phonebook(
    id INT NOT NULL AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    number VARCHAR(100) NOT NULL,
    PRIMARY KEY (id)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    """
    cursor.execute(phonebook_table)

def find_persons(keyword):
    query = f"""
    SELECT * FROM phonebook WHERE name like '%{keyword.strip().lower()}%';
    """
    cursor.execute(query)
    result = cursor.fetchall()
    persons = [{'id': row[0], 'name': row[1].strip().title(), 'number': row[2]} for row in result]
    if len(persons) == 0:
        persons = [{'name': 'No Result', 'number': 'No Result'}]
    return persons

def insert_person(name, number):
    query = f"""
    SELECT * FROM phonebook WHERE name like '{name.strip().lower()}';
    """
    cursor.execute(query)
    row = cursor.fetchone()
    if row is not None:
        return f'Person with name {row[1].title()} already exits.'
    insert = f"""
    INSERT INTO phonebook (name, number)
    VALUES ('{name.strip().lower()}', '{number}');
    """
    cursor.execute(insert)
    return f'Person {name.strip().title()} added to Phonebook successfully'

def update_person(name, number):
    query = f"""
    SELECT * FROM phonebook WHERE name like '{name.strip().lower()}';
    """
    cursor.execute(query)
    row = cursor.fetchone()
    if row is None:
        return f'Person with name {name.strip().title()} does not exist.'
    update = f"""
    UPDATE phonebook
    SET name='{row[1]}', number = '{number}'
    WHERE id= {row[0]};
    """
    cursor.execute(update)
    return f'Phone record of {name.strip().title()} is updated successfully'

def delete_person(name):
    query = f"""
    SELECT * FROM phonebook WHERE name like '{name.strip().lower()}';
    """
    cursor.execute(query)
    row = cursor.fetchone()
    if row is None:
        return f'Person with name {name.strip().title()} does not exist, no need to delete.'
    delete = f"""
    DELETE FROM phonebook
    WHERE id= {row[0]};
    """
    cursor.execute(delete)
    return f'Phone record of {name.strip().title()} is deleted from the phonebook successfully'

@app.route('/', methods=['GET', 'POST'])
def find_records():
    if request.method == 'POST':
        keyword = request.form['username']
        persons_app = find_persons(keyword)
        return render_template('index.html', persons_html=persons_app, keyword=keyword, show_result=True, developer_name=developer_name')
    else:
        return render_template('index.html', show_result=False, developer_name=developer_name')

@app.route('/add', methods=['GET', 'POST'])
def add_record():
    if request.method == 'POST':
        name = request.form['username']
        if name is None or name.strip() == "":
            return render_template('add-update.html', not_valid=True, message='Invalid input: Name can not be empty', show_result=False, action_name='save', developer_name=developer_name')
        elif name.isdecimal():
            return render_template('add-update.html', not_valid=True, message='Invalid input: Name of person should be text', show_result=False, action_name='save', developer_name=developer_name')
        phone_number = request.form['phonenumber']
        if phone_number is None or phone_number.strip() == "":
            return render_template('add-update.html', not_valid=True, message='Invalid input: Phone number can not be empty', show_result=False, action_name='save', developer_name=developer_name')
        elif not phone_number.isdecimal():
            return render_template('add-update.html', not_valid=True, message='Invalid input: Phone number should be in numeric format', show_result=False, action_name='save', developer_name=developer_name')
        result_app = insert_person(name, phone_number)
        return render_template('add-update.html', show_result=True, result_html=result_app, not_valid=False, action_name='save', developer_name=developer_name')
    else:
        return render_template('add-update.html', show_result=False, not_valid=False, action_name='save', developer_name=developer_name')

@app.route('/update', methods=['GET', 'POST'])
def update_record():
    if request.method == 'POST':
        name = request.form['username']
        if name is None or name.strip() == "":
            return render_template('add-update.html', not_valid=True, message='Invalid input: Name can not be empty', show_result=False, action_name='update', developer_name=developer_name')
        phone_number = request.form['phonenumber']
        if phone_number is None or phone_number.strip() == "":
            return render_template('add-update.html', not_valid=True, message='Invalid input: Phone number can not be empty', show_result=False, action_name='update', developer_name=developer_name')
        elif not phone_number.isdecimal():
            return render_template('add-update.html', not_valid=True, message='Invalid input: Phone number should be in numeric format', show_result=False, action_name='update', developer_name=developer_name')
        result_app = update_person(name, phone_number)
        return render_template('add-update.html', show_result=True, result_html=result_app, not_valid=False, action_name='update', developer_name=developer_name')
    else:
        return render_template('add-update.html', show_result=False, not_valid=False, action_name='update', developer_name=developer_name')

@app.route('/delete', methods=['GET', 'POST'])
def delete_record():
    if request.method == 'POST':
        name = request.form['username']
        if name is None or name.strip() == "":
            return render_template('delete.html', not_valid=True, message='Invalid input: Name can not be empty', show_result=False, developer_name=developer_name')
        result_app = delete_person(name)
        return render_template('delete.html', show_result=True, result_html=result_app, not_valid=False, developer_name=developer_name')
    else:
        return render_template('delete.html', show_result=False, not_valid=False, developer_name=developer_name')

if __name__ == '__main__':
    init_phonebook_db()
    app.run(host='0.0.0.0', port=80)
